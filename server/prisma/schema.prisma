generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id          Int        @id @default(autoincrement())
  employee_id Int
  check_in    Int
  business_id Int
  check_out   Int?
  employees   employees  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attendance_ibfk_1")
  businesses  businesses @relation(fields: [business_id], references: [id], onUpdate: Restrict, map: "attendance_ibfk_2")

  @@index([business_id], map: "business_id")
  @@index([employee_id], map: "employee_id")
}

model business_locations {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar(100)
  address              String?              @db.VarChar(100)
  city                 String?              @db.VarChar(50)
  country_id           Int?
  location_unique_name String               @db.VarChar(15)
  is_active            Int                  @db.TinyInt
  business_id          Int
  created_at           Int?
  updated_at           Int?
  countries            countries            @relation(fields: [id], references: [id], onUpdate: Restrict, map: "countries")
  businesses           businesses           @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_locations")
  employee_locations   employee_locations[] @ignore

  @@index([business_id], map: "fk_locations")
}

model businesses {
  id                 Int                  @id @default(autoincrement())
  business_name      String               @db.VarChar(30)
  owner_id           Int
  current_plan       String               @db.VarChar(10)
  created_at         Int
  updated_at         Int?
  attendance         attendance[]
  business_locations business_locations[]
  departments        departments[]
  employees          employees[]
  roles              roles[]
  shifts             shifts[]
  users              users[]
}

model countries {
  id                 Int                 @id @default(autoincrement())
  iso                String              @db.Char(2)
  name               String              @db.VarChar(80)
  nicename           String              @db.VarChar(80)
  iso3               String?             @db.Char(3)
  numcode            Int?                @db.SmallInt
  phonecode          Int
  business_locations business_locations?
}

model departments {
  id          Int         @id @default(autoincrement())
  name        String?     @db.VarChar(50)
  created_at  Int?
  updated_at  Int?
  business_id Int
  businesses  businesses  @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_business")
  employees   employees[]

  @@index([business_id], map: "fk_business")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model employee_locations {
  employee_id        Int
  location_id        Int
  employees          employees          @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "employee_locations_ibfk_1")
  business_locations business_locations @relation(fields: [location_id], references: [id], onUpdate: Restrict, map: "employee_locations_ibfk_2")

  @@index([employee_id], map: "employee_id")
  @@index([location_id], map: "location_id")
  @@ignore
}

model employees {
  id                 Int                  @id @default(autoincrement())
  first_name         String?              @db.VarChar(100)
  last_name          String?              @db.VarChar(100)
  middle_name        String?              @db.VarChar(100)
  mobile             String?              @db.VarChar(20)
  business_id        Int
  email              String?              @db.VarChar(100)
  address            String?              @db.VarChar(255)
  city               String?              @db.VarChar(100)
  job_title          String?              @db.VarChar(50)
  department_id      Int
  pin                String?              @db.VarChar(4)
  image_is_set       Int?
  image_url          String?              @db.VarChar(1000)
  is_checkedin       Int?                 @db.TinyInt
  shift_id           Int?
  manager_id         Int
  is_active          Int?                 @db.TinyInt
  session_id         Int?
  employment_status  String?              @db.VarChar(20)
  attendance         attendance[]
  employee_locations employee_locations[] @ignore
  departments        departments          @relation(fields: [department_id], references: [id], onUpdate: Restrict, map: "employees_ibfk_1")
  businesses         businesses           @relation(fields: [business_id], references: [id], onUpdate: Restrict, map: "employees_ibfk_2")
  shifts             shifts?              @relation(fields: [shift_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "employees_ibfk_3")
  users              users                @relation(fields: [manager_id], references: [id], onUpdate: Restrict, map: "employees_ibfk_4")

  @@index([business_id], map: "business_id")
  @@index([department_id], map: "department_id")
  @@index([manager_id], map: "manager_id")
  @@index([shift_id], map: "shift_id")
}

model permissions {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(30)
  created_at           Int
  permissions_of_roles permissions_of_roles[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model permissions_of_roles {
  permission_id Int
  role_id       Int
  permissions   permissions @relation(fields: [permission_id], references: [id], onUpdate: Restrict, map: "permissions_of_roles_ibfk_1")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "permissions_of_roles_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
  @@ignore
}

model roles {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  is_admin             Int                    @db.TinyInt
  business_id          Int
  created_at           Int?
  updated_at           Int?
  permissions_of_roles permissions_of_roles[] @ignore
  businesses           businesses             @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "roles_ibfk_1")
  users                users[]

  @@index([business_id], map: "business_id")
}

model shifts {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  start_time  DateTime    @db.Time(0)
  end_time    DateTime    @db.Time(0)
  business_id Int
  employees   employees[]
  businesses  businesses  @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_shift")

  @@index([business_id], map: "fk_shift")
}

model users {
  id          Int         @id @default(autoincrement())
  first_name  String      @db.VarChar(20)
  last_name   String      @db.VarChar(20)
  email       String      @db.VarChar(100)
  phone       String      @db.VarChar(15)
  password    String      @db.VarChar(255)
  role_id     Int?
  is_owner    Int         @db.TinyInt
  created_at  Int?
  updated_at  Int?
  business_id Int?
  employees   employees[]
  roles       roles?      @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  businesses  businesses? @relation(fields: [business_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_2")

  @@index([business_id], map: "business_id")
  @@index([role_id], map: "role_id")
}
